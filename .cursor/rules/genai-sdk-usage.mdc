---
alwaysApply: true
description: "Global rule for correct usage of the Google Gen AI SDK (@google/genai) aligned with the official documentation; applies to any change that involves SDK usage."
---

# Global Rule â€” Google Gen AI SDK Usage (@google/genai)

Authoritative reference for any SDK-related change: [Google Gen AI SDK Documentation](https://googleapis.github.io/js-genai/release_docs/index.html)

This rule must be followed whenever a task involves initializing, configuring, or calling the Google Gen AI SDK, including models, chats, files, caches, live sessions, function calling, MCP, and error handling.

## Source of Truth
- Always align implementation choices with the official SDK docs above. When introducing or modifying SDK usage, reference the relevant section(s) in commit messages or PR descriptions.
- Prefer the latest stable API surface; explicitly set `apiVersion: 'v1'` unless a preview feature is required and justified.

## Configuration & Security
- Do not expose API keys client-side. Initialization and calls must be server-side only.
- Use environment-driven configuration. Prefer `GOOGLE_API_KEY` (Gemini Developer API) or the Vertex AI env trio `GOOGLE_GENAI_USE_VERTEXAI`, `GOOGLE_CLOUD_PROJECT`, `GOOGLE_CLOUD_LOCATION`.
- Centralize configuration in [lib/google-genai-config.ts](mdc:lib/google-genai-config.ts). If changes are needed, modify this module rather than scattering config across files.

## Module Usage Guidelines
- `ai.models`:
  - Use `generateContent` for non-streaming, `generateContentStream` for responsive UX; choose explicitly and document rationale.
  - Use explicit model IDs (e.g., `gemini-2.0-flash-001`, `gemini-2.5-flash`) validated against the docs.
- `ai.chats`:
  - For multi-turn tasks, prefer local chat objects to maintain turn history and tool response flow.
  - Ensure conversation state is bridged via our context layer: see [lib/context-window-manager.ts](mdc:lib/context-window-manager.ts) and [lib/context-optimization-manager.ts](mdc:lib/context-optimization-manager.ts).
- `ai.files`:
  - Upload and reference files rather than inlining large content. This reduces bandwidth and ensures files are addressable by the model across turns.
  - Use file references consistently in prompts and tool responses; avoid duplicating file payloads in request bodies.
- `ai.caches`:
  - For repeated large prompt prefixes, create and reuse caches to reduce cost and latency. Document cache lifetime and invalidation strategy.
- `ai.live`:
  - Use only for real-time multimodal (text/audio/video) needs. Ensure the session lifecycle (start/stop) is explicit.

## Tools, Function Calling, and MCP
- When enabling tool use:
  - Declare `FunctionDeclaration` with accurate `parametersJsonSchema` and constrained `allowedFunctionNames`.
  - Set `functionCallingConfig.mode` deliberately (e.g., `ANY`, `AUTO`, or `NONE`) and document why.
- MCP (experimental):
  - If using MCP tools, wrap the client via `mcpToTool` per docs, manage connection lifecycle, and ensure tool-side error propagation is robust.

## Grounding, Citations, and RAG Discipline
- Retrieval must precede generation when grounding responses. Follow the SDK guidance in the official docs directory to configure grounding and citations on requests.
- Grounding metadata and citations should follow the SDK types (e.g., `GroundingMetadata`, `GroundingChunkWeb`) as documented under the SDK reference. Ensure hyperlinks and citation metadata are attached to responses and preserved in downstream rendering.
- For streaming grounded output, use `generateContentStream` and surface incremental text along with any grounding/citation metadata as provided by the SDK.
- Use `ai.files` to reference large or repeat documents instead of inlining content, ensuring durability across turns.

## Error Handling & Observability
- Handle SDK errors using the documented `ApiError` shape. Capture `name`, `message`, and `status` where available.
- Ensure errors and timings are reported through our observability layer: see [lib/enhanced-sentry-metrics-tracker.ts](mdc:lib/enhanced-sentry-metrics-tracker.ts) and [lib/session-metrics-comprehensive-tracker.ts](mdc:lib/session-metrics-comprehensive-tracker.ts).

## Migration & Consistency
- Standardize on `@google/genai`. Replace usages of deprecated SDKs or direct REST wrappers with the official SDK interfaces.
- Keep imports typed and cohesive; avoid ad-hoc wrappers unless placed in shared modules like [lib/hopeai-orchestration-bridge.ts](mdc:lib/hopeai-orchestration-bridge.ts).

## Change Checklist (must-read before merging)
1. Documentation parity: Link to the exact doc section(s) from the official SDK page in the PR.
2. API version: Chosen explicitly (`v1` vs preview) and justified.
3. Initialization: No client-side keys; env-driven; centralized in [lib/google-genai-config.ts](mdc:lib/google-genai-config.ts).
4. Module selection: Correct use of `models` vs `chats` vs `files` vs `caches` vs `live` based on the use case.
5. Streaming: If UX requires responsiveness, `generateContentStream` is used and consumer handles incremental updates.
6. Files: Large or repeat content is uploaded via `ai.files` and referenced in prompts; no redundant inlining.
7. Function calling: Declarations are minimally permissive; `allowedFunctionNames` set; parameters schema validated.
8. Grounding & RAG: Retrieval precedes generation; augmentation is source-bound; citations and hyperlinks (per SDK types such as `GroundingMetadata`/`GroundingChunkWeb`) are preserved across non-streaming and streaming paths; hallucination risk mitigated.
9. Error handling: `ApiError` handled; telemetry captured.
10. Security: Keys and PII never leak to client; logs scrubbed.

Refer back to the official docs for API shapes, options, and advanced patterns: [Google Gen AI SDK Documentation](https://googleapis.github.io/js-genai/release_docs/index.html)

